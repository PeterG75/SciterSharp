namespace Utils
{
	const IsWindows = view.mediaVars()["os-vendor"] == "Microsoft";//System.OS.toString().indexOf("Windows")!=-1;
	const IsOSX = System.OS.toString().indexOf("MacOSX")!=-1;
	const IsOSX_UI = view.mediaVars()["os-vendor"] == "Apple";

	property InDBGView(val)
	{
		get
		{
			return !!View.omni || !!View.omniview;
		}
	}

	const SciterVersion = String.printf("%d.%d.%d.%d", 
		(Sciter.VERSION >> 16) & 0xffff, Sciter.VERSION & 0xffff,
		(Sciter.REVISION >> 16) & 0xffff, Sciter.REVISION & 0xffff);

	function popupAttachment(anchorPoint = 1, popupPoint = 7)// 1, 7 is the most common
	{
		return (popupPoint << 16) | anchorPoint;
	}

	function readFileText(path)
	{
		var stream = Stream.openFile(path);
		var txt = "";
		while(var ln = stream.readln())
			txt += ln;
		return txt;
	}

	function readStreamToEnd(stream)
	{
		var txt = "";
		var line;
		while((line = stream.readln()) !== undefined)
			txt += line;
		return txt;
	}

	// Makes clicking in <a href="XYZ"> open the browser, and so to not do navigating inside the Sciter engine
	// ex.: Utils.installLinkHandler(self);
	//
	// Does work for a parent frame, so Utils.installLinkHandler($(frame))
	function installLinkHandler(el)
	{
		el.on("~mouseup", "a[href]", function(evt) {
			if(evt.target.@#href)
				Sciter.launch(evt.target.@#href);
			return true;
		});
	}

	function revealPath(path)
	{
		if(Utils.IsWindows)
			System.exec("explorer.exe", "/select," + path.replace("/", "\\"));
		else(Utils.IsOSX)
			System.exec("open", "-R " + path);
	}
}

function Element.tagname()
{
	var name = this.tag;
	var id = this.id;
	var classes = this.@#class;
	if(id)
		name += "#" + id;
	if(classes)
		name += "." + classes.split(" ").join(".");
	return "<" + name + ">";
}

function Element.hide()
{
	this.style#visibility = "none";
}
function Element.show()
{
	this.style#visibility = "visible";
}
function Element.toggle()
{
	this.style#visibility = this.isVisible ? "none" : "visible";
}

function Element.asViewMoveHandler()
{
	var captured = false;
	var offx;
	var offy;

	this.onMouse = function(evt) {
		if(captured)
		{
			if(evt.type == Event.MOUSE_MOVE)
			{
				view.move(evt.xScreen - offx, evt.yScreen - offy);
			}
			else if(evt.type == Event.MOUSE_UP || evt.type == Event.MOUSE_LEAVE)
			{
				this.capture(false);
				captured = false;
			}
		} else {
			if(evt.type == Event.MOUSE_DOWN)
			{
				var (x,y) = view.box(#position, #border, #screen);
				offx = evt.xScreen - x;
				offy = evt.yScreen - y;

				captured = true;
				this.capture(#strict);
			}
		}
	};
}